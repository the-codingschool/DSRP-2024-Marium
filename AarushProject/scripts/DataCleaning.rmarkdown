Read in dataset


```{r}
library(dplyr)
library(janitor)
library(ggplot2)
library(tidyr)
library(readr)
library(lubridate)
library(maps)
library(ggmap)
library(sp)
library(leaflet)
library(sf)
library(RColorBrewer)
#read in dataset
file_name <- list.files("data")
data <- read.csv("/Users/reddy/Documents/DSRP-Dataset/bluebikes/AarushProject/data/202406-bluebikes-tripdata.csv")
head(data)
dim(data)
str(data)
```


Taking out NAs


```{r}
data_clean <- drop_na(remove_empty(data, c("rows", "cols")))
dim(data_clean)
```


made smaller data set and separated date and time


```{r}
data_time_sep <- data_clean %>%
  select(ride_id,started_at, ended_at, member_casual) %>%
  separate(started_at, into = c("start_date", "start_time"), sep = " ") %>%
  separate(ended_at, into = c("end_date", "end_time"), sep = " ") %>%
  mutate(started_at = data_clean$started_at,ended_at = data_clean$ended_at) 

head(data_time_sep)
```


add new column to data_time_sep called ride_time_mins


```{r}

data_time_sep <- data_time_sep %>%
  mutate(started_at = ymd_hms(started_at),
         ended_at = ymd_hms(ended_at),
         ride_time_mins = as.numeric(difftime(ended_at, started_at, units = "mins")))
data_time_sep
```

```{r}
data_distance <- data_clean |>
  select(ride_id, start_lat, start_lng, end_lat, end_lng) |>
  mutate(distance_km = distHaversine(cbind(start_lng, start_lat), cbind(end_lng, end_lat)) / 1000)
head(data_distance)
```

```{r}
boston_districts <- st_read("/Users/reddy/Documents/DSRP-Dataset/bluebikes/data/Boston_Neighborhoods.geojson")
print(boston_districts)
```


map of latitude and longitude for a sample of 50 bike's starting position


```{r}
# Define a color palette
data_sample <- slice_head(data_clean, n=100)

# Create a leaflet map with markers
map <- leaflet(data_sample) %>%
  addTiles() %>%  # Add default OpenStreetMap tiles
  addMarkers(~start_lng, ~start_lat)

# Load the Boston neighborhoods GeoJSON file
boston_districts <- st_read("/Users/reddy/Documents/DSRP-Dataset/bluebikes/data/Boston_Neighborhoods.geojson")

# Check the structure of the data
str(boston_districts)

# Define a color palette with a sufficient number of colors
num_districts <- length(unique(boston_districts$Neighborhood_ID))
colors <- colorRampPalette(brewer.pal(12, "Set3"))(num_districts)

# Create a color mapping based on the 'Neighborhood_ID' field
color_mapping <- setNames(colors, unique(boston_districts$Neighborhood_ID))

# Print color mapping to verify
print(color_mapping)

# Add the district layer to the map with color based on 'Neighborhood_ID'
map <- map %>%
  addPolygons(
    data = boston_districts,
    fillColor = ~color_mapping[as.character(Neighborhood_ID)],  # Ensure proper mapping
    weight = 2,
    color = "#FFFFFF",
    fillOpacity = 0.7,
    popup = ~paste0("Neighborhood: ", Neighborhood_ID)
  )

# Print the map
map
```

