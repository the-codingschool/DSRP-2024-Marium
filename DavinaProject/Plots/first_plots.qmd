BlueBikes Plots

Installing packages

```{r}
#install.packages("tidyverse")
library(tidyr) 
library(dplyr) 
library(ggplot2)
#install.packages("tmap", repos = c("https://r-tmap.r-universe.dev",
                                  # "https://cloud.r-project.org"))
library(sf)
library(terra)
library(dplyr)
#library(spData)
#library(spDataLarge)
library(tmap)    
library(leaflet)

library(caTools)
library(readr)
library(downloader)
library(caTools)
library(FNN)
library(readxl)

library(lubridate)

library(digest)
```

Loading dataset

```{r}
# read in dataset
file_name <- list.files("data")
data_original <- read.csv(paste0("data/",file_name))
data_original
```

Add column: total trip time

```{r}
times <- mutate(data_original, trip_time = difftime(ended_at,started_at, units = "mins"))
head(times)
```

Creating new datasets with relevant columns only

```{r}
# all relevant columns
rel_data <- select(times,"ride_id","rideable_type","trip_time","start_station_id", "end_station_id")

# type of bike and trip time
bike_time <- select(times,"rideable_type","trip_time")

# type of bike and stations
bike_station <- select(times,"rideable_type","start_station_id", "end_station_id")

# trip time and stations
time_station <- select(times,"trip_time","start_station_id", "end_station_id")

#locations
start_locations <- select(times,"start_station_id","start_lat","start_lng")

#head(rel_data)
#bike_time
#head(bike_station)
#head(time_station)
head(start_locations)
```

Plots

Scatter Plot: Average Time of Trip Vs. Type of Bike

```{r}
classical_times <- filter(bike_time, bike_time$rideable_type=="classic_bike")
#classical_times
mean_classical <- mean(classical_times$trip_time)
mean_classical

electrical_times <- filter(bike_time, bike_time$rideable_type=="electric_bike")
#electrical_times
mean_electrical <- mean(electrical_times$trip_time)
mean_electrical

bike_mean_times <- data.frame(bike_type=c("classical", "electrical"), avg_time=c(mean_classical, mean_electrical))
bike_mean_times

ggplot(data = bike_mean_times, aes(x = bike_type, y = avg_time)) +
  geom_bar(stat = "identity") +
  xlab('Type of Bike') +
  ylab('Average Trip Time') +
  ggtitle('Average Time of Trip Vs.Type of Bike')

ggplot(data = bike_time, aes(x = rideable_type, y = trip_time)) + 
  geom_bar(stat = "summary", fun = "mean") +
    labs(x = "Type of Bike", y = "Average Trip Duration", title = "Average Trip Duration by Type of Bike")
```

Average Trip Time Vs. Starting Station

```{r}
ggplot(data = time_station, aes(x = start_station_id, y = trip_time)) + 
  geom_bar(stat = "summary", fun = "mean")
```

Map of Starting Locations

```{r}
start_locations <- select(times,"start_station_id","start_lat","start_lng")

start_loc <- st_as_sf(start_locations, coords = c("start_lng", "start_lat"))

ggplot(start_loc) + 
  geom_sf(aes(color="red"))

```

Map of Ending Locations

```{r}
end_locations <- select(times,"end_station_id","end_lat","end_lng")

end_locations <- na.omit(end_locations[1:3])
end_locations

end_loc <- st_as_sf(end_locations, coords = c("end_lng", "end_lat"))

ggplot(end_loc) + 
  geom_sf(aes(color="red"))
```

Days of the Week

```{r}
date_time <- separate(data = times, col="started_at", into=c("start_date","start_time"), sep=" ")
date_time <- separate(data = date_time, col="ended_at", into=c("end_date","end_time"), sep=" ")
head(date_time)

dates <- data.frame(start_date = as.Date(date_time$start_date), end_date = as.Date(date_time$end_date)) 

days <- data.frame(start_weekday = weekdays(dates$start_date), end_weekday = weekdays(dates$end_date), trip_time= times$trip_time)          
days
```

Day of Week Vs. Average Trip Time

```{r}
days$start_weekday <- factor(days$start_weekday, levels = c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))

ggplot(data = days, aes(x = start_weekday, y = trip_time)) + 
  geom_bar(stat = "summary", fun = "mean") +
  labs(x = "Day of the Week", y = "Average Trip Duration", title = "Average Trip Duration by Day of the Week")
```

```{r}
ggplot(data = final_data, aes(x = distance, y = trip_time)) + 
  geom_point(stat = "summary", fun = "mean") +
  labs(x = "Day of the Week", y = "Average Trip Duration", title = "Average Trip Duration by Day of the Week")
```

Converting all data into numerical values!

```{r}
#date_time
#days
num_data <- data_frame(rideable_type = date_time$rideable_type, 
                       start_time = date_time$start_time, 
                       start_weekday = days$start_weekday, 
                       end_weekday = days$end_weekday, 
                       start_station_id = date_time$start_station_id, 
                       end_station_id = date_time$end_station_id,
                       start_lat = date_time$start_lat,
                       start_lng = date_time$start_lng,
                       end_lat = date_time$end_lat,
                       end_lng = date_time$end_lng,
                       member_casual = times$member_casual,
                       trip_time = date_time$trip_time)

#head(num_data)

#making rideable type numerical
num_data <- mutate(num_data, classic_bike = ifelse(rideable_type=="classic_bike", 1, 0),
         electric_bike = ifelse(rideable_type=="electric_bike", 1, 0))

#making start_weekday numerical
num_data <- mutate(num_data, sun = ifelse(start_weekday=="Sunday", 1, 0),
                   mon = ifelse(start_weekday=="Monday", 1, 0),
                   tue = ifelse(start_weekday=="Tuesday", 1, 0),
                   wed = ifelse(start_weekday=="Wednesday", 1, 0),
                   thu = ifelse(start_weekday=="Thursday", 1, 0),
                   fri = ifelse(start_weekday=="Friday", 1, 0),
                   sat = ifelse(start_weekday=="Saturday", 1, 0))

#making member_casual numerical
num_data <- mutate(num_data, member = ifelse(member_casual=="member", 1, 0),
                   casual = ifelse(member_casual=="casual", 1, 0))

#making start_time numerical
num_data <- mutate(num_data, start_timeform=hms(num_data$start_time))

#making start_station_id numerical
#id_to_crc32 <- function(id) {return(as.numeric(crc32(id)))}

#num_data <- mutate(num_data, start_station_id_hashed =
                     #sapply(num_data$start_station_id, id_to_crc32))

id_to_crc32 <- function(id) {
  hash_value <- digest(id, algo = "crc32", serialize = FALSE)
  return(as.numeric(paste0("0x", hash_value)))
}

# Apply the function to hash the start_station_id column
num_data <- mutate(num_data, start_station_id_hashed = sapply(start_station_id, id_to_crc32))

# Apply the function to hash the start_station_id column
num_data <- mutate(num_data, end_station_id_hashed = sapply(end_station_id, id_to_crc32))
```

```{r}
conv_data
```

Making final dataset

```{r}
conv_data <- select(num_data, 7:10, 13:26)

data_original %>% 
  mutate(started_at=parse_date_time(started_at, "Ymd HMS"),
    start_hour=hour(started_at))

final_data <- data_frame(
  start_lat = conv_data$start_lat,
  start_lng = conv_data$start_lng,
  end_lat = conv_data$end_lat,
  end_lng = conv_data$end_lng,
  classic_bike = conv_data$classic_bike,
  electric_bike = conv_data$electric_bike,
  sun = conv_data$sun,
  mon = conv_data$mon,
  tue = conv_data$tue,
  wed = conv_data$wed,
  thu = conv_data$thu,
  fri = conv_data$fri,
  sat = conv_data$sat,
  member = conv_data$member,
  casual = conv_data$casual,
  start_station_id_hash = conv_data$start_station_id_hashed,
  end_station_id_hash = conv_data$start_station_id_hashed,
  start_hour = hour(conv_data$start_timeform))

final_data <- na.omit(final_data)

final_data
```

Checking the hashed values

```{r}
filter(num_data, start_station_id=="M32013")
#hashed: 3812739417	
filter(num_data, end_station_id=="M32013")
#hashed: 3812739417
```

Start Hour vs. Average Trip Time

```{r}
final_data$start_hour <- factor(final_data$start_hour, levels = as.character(0:23))

ggplot(data = final_data, aes(x = start_hour, y = trip_time)) + 
  stat_summary(geom = "bar", fun = "mean") +
  labs(x = "Hour of the Day", y = "Average Trip Duration", title = "Average Trip Duration by Hour of the Day")
```
