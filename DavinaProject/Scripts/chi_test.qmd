BlueBikes Chi-Squared Test

Loading packages

```{r}
#install.packages("tidyverse")
library(tidyr) 
library(dplyr) 
library(ggplot2)
#install.packages("tmap", repos = c("https://r-tmap.r-universe.dev",
                                  # "https://cloud.r-project.org"))
library(sf)
library(terra)
library(dplyr)
library(tmap)    
library(leaflet)

library(caTools)
library(readr)
library(downloader)
library(caTools)
library(FNN)
library(readxl)

library(lubridate)

library(digest)

#install.packages("factoextra")
library(factoextra)

#install.packages("bigmemory")
library(bigmemory)

#install.packages("geosphere")
library(geosphere)

#install.packages("vcd")
library(vcd)
```

Loading dataset

```{r}
# read in dataset
file_name <- list.files("data")
data_original <- read.csv(paste0("data/",file_name))
data_original
data_original <- na.omit(data_original)
```

Add column: total trip time

```{r}
times <- mutate(data_original, trip_time = difftime(ended_at,started_at, units = "mins"))
times
```

Creating new datasets with relevant columns only

```{r}
# all relevant columns
rel_data <- select(times,"ride_id","rideable_type","trip_time","start_station_id", "end_station_id")

# type of bike and trip time
bike_time <- select(times,"rideable_type","trip_time")

# type of bike and stations
bike_station <- select(times,"rideable_type","start_station_id", "end_station_id")

# trip time and stations
time_station <- select(times,"trip_time","start_station_id", "end_station_id")

#locations
start_locations <- select(times,"start_station_id","start_lat","start_lng")

date_time <- separate(data = times, col="started_at", into=c("start_date","start_time"), sep=" ")
date_time <- separate(data = date_time, col="ended_at", into=c("end_date","end_time"), sep=" ")
head(date_time)

dates <- data.frame(start_date = as.Date(date_time$start_date), end_date = as.Date(date_time$end_date)) 

days <- data.frame(start_weekday = weekdays(dates$start_date), end_weekday = weekdays(dates$end_date), trip_time= times$trip_time)          
days

#head(rel_data)
#bike_time
#head(bike_station)
#head(time_station)
#head(start_locations)
```

Converting all data into numerical values!

```{r}
#date_time
#days
num_data <- data_frame(rideable_type = date_time$rideable_type, 
                       start_time = date_time$start_time, 
                       start_weekday = days$start_weekday, 
                       end_weekday = days$end_weekday, 
                       start_station_id = date_time$start_station_id, 
                       end_station_id = date_time$end_station_id,
                       start_lat = date_time$start_lat,
                       start_lng = date_time$start_lng,
                       end_lat = date_time$end_lat,
                       end_lng = date_time$end_lng,
                       member_casual = times$member_casual,
                       trip_time = date_time$trip_time)

#head(num_data)

#making rideable type numerical
num_data <- mutate(num_data, classic_bike = ifelse(rideable_type=="classic_bike", 1, 0),
         electric_bike = ifelse(rideable_type=="electric_bike", 1, 0))

#making start_weekday numerical
num_data <- mutate(num_data, sun = ifelse(start_weekday=="Sunday", 1, 0),
                   mon = ifelse(start_weekday=="Monday", 1, 0),
                   tue = ifelse(start_weekday=="Tuesday", 1, 0),
                   wed = ifelse(start_weekday=="Wednesday", 1, 0),
                   thu = ifelse(start_weekday=="Thursday", 1, 0),
                   fri = ifelse(start_weekday=="Friday", 1, 0),
                   sat = ifelse(start_weekday=="Saturday", 1, 0))

#making member_casual numerical
num_data <- mutate(num_data, member = ifelse(member_casual=="member", 1, 0),
                   casual = ifelse(member_casual=="casual", 1, 0))

#making start_time numerical
num_data <- mutate(num_data, start_timeform=hms(num_data$start_time))

#making start_station_id numerical
#id_to_crc32 <- function(id) {return(as.numeric(crc32(id)))}

#num_data <- mutate(num_data, start_station_id_hashed =
                     #sapply(num_data$start_station_id, id_to_crc32))

id_to_crc32 <- function(id) {
  hash_value <- digest(id, algo = "crc32", serialize = FALSE)
  return(as.numeric(paste0("0x", hash_value)))
}

# Apply the function to hash the start_station_id column
num_data <- mutate(num_data, start_station_id_hashed = sapply(start_station_id, id_to_crc32))

# Apply the function to hash the start_station_id column
num_data <- mutate(num_data, end_station_id_hashed = sapply(end_station_id, id_to_crc32))
```

Making final dataset

```{r}
#making time ranges
start <- 0
end <- 1500
interval <- 5

ranges <- sapply(seq(start, end - interval, by = interval), function(x) {
  paste(x, x + interval, sep = "-")
})

#print(ranges)

#defining the time ranges
numsfive <- seq(from = 0, to = 1500, by = 5)

#print(numsfive)
```

```{r}
conv_data <- select(num_data, 7:10, 13:26)

data_original %>% 
  mutate(started_at=parse_date_time(started_at, "Ymd HMS"),
    start_hour=hour(started_at))

compute_distance <- function(start_lng, start_lat, end_lng, end_lat) {
  distHaversine(c(start_lng, start_lat), c(end_lng, end_lat))
}

final_data <- data_frame(
  sun = conv_data$sun,
  sat = conv_data$sat,
  classic_bike = conv_data$classic_bike,
  weekend = ifelse(conv_data$sat == 1 | conv_data$sun == 1, 1, 0),
  member = conv_data$member,
  casual = conv_data$casual,
  start_station_id_hash = conv_data$start_station_id_hashed,
  end_station_id_hash = conv_data$start_station_id_hashed,
  start_hour = hour(conv_data$start_timeform),
  distance = ifelse(mapply(compute_distance, data_original$start_lng, data_original$start_lat, data_original$end_lng, data_original$end_lat) <= 4000, mapply(compute_distance, data_original$start_lng, data_original$start_lat, data_original$end_lng, data_original$end_lat), NA),
  start_lon = data_original$start_lng,
  start_lat = data_original$start_lat,
  end_lat = data_original$end_lat,
  end_lon = data_original$end_lng,
  trip_time = ifelse(round(times$trip_time, digits = 0) <= 25, round(times$trip_time, digits = 0), NA))

final_data$trip_time <- as.numeric(final_data$trip_time)

final_data$trip_time <- cut(final_data$trip_time, breaks = numsfive, labels = ranges, include.lowest = TRUE)

final_data$trip_time <- as.numeric(final_data$trip_time)

final_data <- na.omit(final_data)

final_data
```

```{r}
head(final_data)
```

```{r}
head(conv_data)
```

```{r}
head(data_original)
```

```{r}
head(times)
times %>%
  select(ride_id, rideable_type, started_at, ended_at, start_station_name,start_station_id, end_station_name, end_station_id, start_lat, start_lng, end_lat, end_lng, member_casual, trip_time) %>%
  mutate(
    trip_time = round(times$trip_time, digits = 0)
  )

times <- na.omit(times)
```

Chi-Squared Test between Member Type and Bike Type

```{r}
con_table <- table(data_original$member_casual, data_original$rideable_type)
con_table
chisq_results <- chisq.test(con_table)
```

```{r}
chisq_results$p.value
#very low, so null hypothesis can be rejected

chisq_results$residuals
#classic bikes used by causal riders more than expected and by members less than expected
#electric bikes used by casual riders less than expected and by members more than expected
```

```{r}
con_df <- as.data.frame(con_table)
colnames(con_df) <- c("rider_type", "bike_type", "count")

ggplot(con_df, aes(x = bike_type, y = rider_type, fill = count)) +
  geom_tile(color = "black") +
  scale_fill_gradient(low = "gray", high = "darkblue") +
  labs(title = "Bike Usage by Rider Type",
       x = "Bike Type",
       y = "Rider Type",
       fill = "Number of Rides") +
  theme_minimal()
```

```{r}
#
```
