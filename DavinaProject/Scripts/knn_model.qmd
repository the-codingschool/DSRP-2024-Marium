BlueBikes KNN Model

Loading packages

```{r}
#install.packages("tidyverse")
library(tidyr) 
library(dplyr) 
library(ggplot2)
#install.packages("tmap", repos = c("https://r-tmap.r-universe.dev",
                                  # "https://cloud.r-project.org"))
library(sf)
library(terra)
library(dplyr)
library(tmap)    
library(leaflet)

library(caTools)
library(readr)
library(downloader)
library(caTools)
library(FNN)
library(readxl)

library(lubridate)

library(digest)

#install.packages("factoextra")
library(factoextra)

install.packages("bigmemory")
library(bigmemory)
```

Loading dataset

```{r}
# read in dataset
file_name <- list.files("data")
data_original <- read.csv(paste0("data/",file_name))
data_original
```

Add column: total trip time

```{r}
times <- mutate(data_original, trip_time = difftime(ended_at,started_at, units = "mins"))
head(times)
```

Creating new datasets with relevant columns only

```{r}
# all relevant columns
rel_data <- select(times,"ride_id","rideable_type","trip_time","start_station_id", "end_station_id")

# type of bike and trip time
bike_time <- select(times,"rideable_type","trip_time")

# type of bike and stations
bike_station <- select(times,"rideable_type","start_station_id", "end_station_id")

# trip time and stations
time_station <- select(times,"trip_time","start_station_id", "end_station_id")

#locations
start_locations <- select(times,"start_station_id","start_lat","start_lng")

#head(rel_data)
#bike_time
#head(bike_station)
#head(time_station)
#head(start_locations)
```

Converting all data into numerical values!

```{r}
#date_time
#days
num_data <- data_frame(rideable_type = date_time$rideable_type, 
                       start_time = date_time$start_time, 
                       start_weekday = days$start_weekday, 
                       end_weekday = days$end_weekday, 
                       start_station_id = date_time$start_station_id, 
                       end_station_id = date_time$end_station_id,
                       start_lat = date_time$start_lat,
                       start_lng = date_time$start_lng,
                       end_lat = date_time$end_lat,
                       end_lng = date_time$end_lng,
                       member_casual = times$member_casual,
                       trip_time = date_time$trip_time)

#head(num_data)

#making rideable type numerical
num_data <- mutate(num_data, classic_bike = ifelse(rideable_type=="classic_bike", 1, 0),
         electric_bike = ifelse(rideable_type=="electric_bike", 1, 0))

#making start_weekday numerical
num_data <- mutate(num_data, sun = ifelse(start_weekday=="Sunday", 1, 0),
                   mon = ifelse(start_weekday=="Monday", 1, 0),
                   tue = ifelse(start_weekday=="Tuesday", 1, 0),
                   wed = ifelse(start_weekday=="Wednesday", 1, 0),
                   thu = ifelse(start_weekday=="Thursday", 1, 0),
                   fri = ifelse(start_weekday=="Friday", 1, 0),
                   sat = ifelse(start_weekday=="Saturday", 1, 0))

#making member_casual numerical
num_data <- mutate(num_data, member = ifelse(member_casual=="member", 1, 0),
                   casual = ifelse(member_casual=="casual", 1, 0))

#making start_time numerical
num_data <- mutate(num_data, start_timeform=hms(num_data$start_time))

#making start_station_id numerical
#id_to_crc32 <- function(id) {return(as.numeric(crc32(id)))}

#num_data <- mutate(num_data, start_station_id_hashed =
                     #sapply(num_data$start_station_id, id_to_crc32))

id_to_crc32 <- function(id) {
  hash_value <- digest(id, algo = "crc32", serialize = FALSE)
  return(as.numeric(paste0("0x", hash_value)))
}

# Apply the function to hash the start_station_id column
num_data <- mutate(num_data, start_station_id_hashed = sapply(start_station_id, id_to_crc32))

# Apply the function to hash the start_station_id column
num_data <- mutate(num_data, end_station_id_hashed = sapply(end_station_id, id_to_crc32))
```

Making final dataset

```{r}
conv_data <- select(num_data, 7:10, 13:26)

data_original %>% 
  mutate(started_at=parse_date_time(started_at, "Ymd HMS"),
    start_hour=hour(started_at))

final_data <- data_frame(
  sun = conv_data$sun,
  sat = conv_data$sat,
  member = conv_data$member,
  casual = conv_data$casual,
  start_station_id_hash = conv_data$start_station_id_hashed,
  end_station_id_hash = conv_data$start_station_id_hashed,
  start_hour = hour(conv_data$start_timeform),
  trip_time = as.numeric(times$trip_time))

final_data <- na.omit(final_data)

final_data
```

KNN Model

Dataset

```{r}
head(final_data)
```

Splitting the Data

```{r}
set.seed(123)

split <- sample.split(final_data$trip_time, SplitRatio = 0.8)
train_data <- subset(final_data, split == TRUE)
test_data <- subset(final_data, split == FALSE)
```

Chosen Variables:

-   from PCA:

    -   end station: end_station_id_hash

    -   start station: start_station_id_hash

    -   casual or member rider: casual

-   from plots:

    -   start time: start_hour

    -   weekend: sat, sun

Fitting the model

```{r}
train_data
```

```{r}
knn_model <- knn(train = train_data, 
                 test = test_data, 
                 cl = train_data$trip_time, 
                 k = 5)
```

Testing the model

```{r}
pred <- knn_model
```

Evaluating the model

```{r}
confusion_matrix <- table(test_data$trip_time, pred)
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)

# Print the evaluation metrics
cat('Confusion Matrix:\n')
print(confusion_matrix)
cat('\nAccuracy:', accuracy, '\n')
#Error in table(test_data$trip_time, pred) : 
  #attempt to make a table with >= 2^31 elements
#so maybe need to convert trip_time into just one integer? like 4.328219 -> 4 mins
#might reduce possibilities and allow for model to work more smoothly
#look for rounding function to convert
```

```{r}

```

```{r}

```
