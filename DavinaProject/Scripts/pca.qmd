BlueBikes Principal Component Analysis

Loading packages

```{r}
#install.packages("tidyverse")
library(tidyr) 
library(dplyr) 
library(ggplot2)
#install.packages("tmap", repos = c("https://r-tmap.r-universe.dev",
                                  # "https://cloud.r-project.org"))
library(sf)
library(terra)
library(dplyr)
library(tmap)    
library(leaflet)

library(caTools)
library(readr)
library(downloader)
library(caTools)
library(FNN)
library(readxl)

library(lubridate)

library(digest)

#install.packages("factoextra")
library(factoextra)

#install.packages("bigmemory")
library(bigmemory)

#install.packages("geosphere")
library(geosphere)
```

Loading dataset

```{r}
# read in dataset
file_name <- list.files("data")
data_original <- read.csv(paste0("data/",file_name))
data_original
```

Add column: total trip time

```{r}
times <- mutate(data_original, trip_time = difftime(ended_at,started_at, units = "mins"))
head(times)
```

Creating new datasets with relevant columns only

```{r}
# all relevant columns
rel_data <- select(times,"ride_id","rideable_type","trip_time","start_station_id", "end_station_id")

# type of bike and trip time
bike_time <- select(times,"rideable_type","trip_time")

# type of bike and stations
bike_station <- select(times,"rideable_type","start_station_id", "end_station_id")

# trip time and stations
time_station <- select(times,"trip_time","start_station_id", "end_station_id")

#locations
start_locations <- select(times,"start_station_id","start_lat","start_lng")

#head(rel_data)
#bike_time
#head(bike_station)
#head(time_station)
#head(start_locations)
```

Converting all data into numerical values!

```{r}
#date_time
#days
num_data <- data_frame(rideable_type = date_time$rideable_type, 
                       start_time = date_time$start_time, 
                       start_weekday = days$start_weekday, 
                       end_weekday = days$end_weekday, 
                       start_station_id = date_time$start_station_id, 
                       end_station_id = date_time$end_station_id,
                       start_lat = date_time$start_lat,
                       start_lng = date_time$start_lng,
                       end_lat = date_time$end_lat,
                       end_lng = date_time$end_lng,
                       member_casual = date_time$member_casual,
                       trip_time = date_time$trip_time)

#head(num_data)

#making rideable type numerical
num_data <- mutate(num_data, classic_bike = ifelse(rideable_type=="classic_bike", 1, 0),
         electric_bike = ifelse(rideable_type=="electric_bike", 1, 0))

#making start_weekday numerical
num_data <- mutate(num_data, sun = ifelse(start_weekday=="Sunday", 1, 0),
                   mon = ifelse(start_weekday=="Monday", 1, 0),
                   tue = ifelse(start_weekday=="Tuesday", 1, 0),
                   wed = ifelse(start_weekday=="Wednesday", 1, 0),
                   thu = ifelse(start_weekday=="Thursday", 1, 0),
                   fri = ifelse(start_weekday=="Friday", 1, 0),
                   sat = ifelse(start_weekday=="Saturday", 1, 0))

#making member_casual numerical
num_data <- mutate(num_data, member = ifelse(member_casual=="member", 1, 0),
                   casual = ifelse(member_casual=="casual", 1, 0))

#making start_time numerical
num_data <- mutate(num_data, start_timeform=hms(num_data$start_time))

#making start_station_id numerical
#id_to_crc32 <- function(id) {return(as.numeric(crc32(id)))}

#num_data <- mutate(num_data, start_station_id_hashed =
                     #sapply(num_data$start_station_id, id_to_crc32))

id_to_crc32 <- function(id) {
  hash_value <- digest(id, algo = "crc32", serialize = FALSE)
  return(as.numeric(paste0("0x", hash_value)))
}

# Apply the function to hash the start_station_id column
num_data <- mutate(num_data, start_station_id_hashed = sapply(start_station_id, id_to_crc32))

# Apply the function to hash the start_station_id column
num_data <- mutate(num_data, end_station_id_hashed = sapply(end_station_id, id_to_crc32))
```

Making final dataset

```{r}
conv_data <- select(num_data, 7:10, 13:26)

data_original %>% 
  mutate(started_at=parse_date_time(started_at, "Ymd HMS"),
    start_hour=hour(started_at))

compute_distance <- function(start_lng, start_lat, end_lng, end_lat) {
  distHaversine(c(start_lng, start_lat), c(end_lng, end_lat))
}

trip_distance <- ifelse(mapply(compute_distance, num_data$start_lng, num_data$start_lat, num_data$end_lng, num_data$end_lat) <= 1500, mapply(compute_distance, num_data$start_lng, num_data$start_lat, num_data$end_lng, num_data$end_lat), NA)
#trip_distance <- ifelse(trip_distance <= 3000, trip_distance, NA)

trip_time_num <- ifelse(as.numeric(num_data$trip_time) <= 30, as.numeric(num_data$trip_time), NA)

final_data <- data_frame(
  sun = conv_data$sun,
  sat = conv_data$sat,
  classic_bike = conv_data$classic_bike,
  weekend = ifelse(conv_data$sat == 1 | conv_data$sun == 1, 1, 0),
  member = conv_data$member,
  casual = conv_data$casual,
  start_station_id_hash = conv_data$start_station_id_hashed,
  end_station_id_hash = conv_data$start_station_id_hashed,
  start_hour = hour(conv_data$start_timeform),
  distance = trip_distance,
  start_lon = num_data$start_lng,
  start_lat = num_data$start_lat,
  end_lat = num_data$end_lat,
  end_lon = num_data$end_lng,
  trip_duration = as.numeric(trip_time_num))

final_data$trip_duration <- as.numeric(cut(final_data$trip_duration, breaks = numsfive, labels = ranges, include.lowest = TRUE))

#final_data$trip_time <- as.numeric(final_data$trip_time)

final_data <- na.omit(final_data)

final_data
```

Principal Component Analysis

```{r}
data_normalized <- scale(final_data)

data_pca <- prcomp(data_normalized, scale. = TRUE)
summary(data_pca)
```

```{r}
fviz_eig(data_pca, addlabels = TRUE)

fviz_pca_var(data_pca, col.var = "black", repel = TRUE)

fviz_cos2(data_pca, choice = "var", axes = 1:2)

fviz_pca_var(data_pca, col.var="cos2",
            gradient.cols = c("red", "orange", "green"),
            repel = TRUE,
            title = "Factor Map")

#fviz_pca_ind(res.pca, col.ind="cos2")
#variables in green = independent variables with most impact on dataset
#variables in orange = independent variables with some impact on dataset
#variables in black = independent variables with low impact on dataset
```

Spree Plot:

-   should use 5 components in KNN model

Factor Map:

-   most represented in data: casual, member, weekend, start_lon, end_lon

-   most related to trip time: casual, distance, start_hour
